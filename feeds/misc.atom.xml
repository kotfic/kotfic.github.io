<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Think out loud</title><link href="http://kotfic.github.io/" rel="alternate"></link><link href="http://kotfic.github.io/feeds/misc.atom.xml" rel="self"></link><id>http://kotfic.github.io/</id><updated>2015-04-15T00:00:00+02:00</updated><entry><title>Org-mode export of matplotlib figures and code</title><link href="http://kotfic.github.io/org-mode-export-of-matplotlib-images-etc.html" rel="alternate"></link><updated>2015-04-15T00:00:00+02:00</updated><author><name>Christopher Kotfila</name></author><id>tag:kotfic.github.io,2015-04-15:org-mode-export-of-matplotlib-images-etc.html</id><summary type="html">&lt;p&gt;My ultimately goal is to publish something almost daily. Unfortunately, until I develop all the surrounding work-flows publication will be a little slower. One of the key components that has cropped up early is a good way to run analysis code and insert matplotlib figures directly into the buffer. This can be accomplished relatively easily with some extra code and &lt;a href="http://orgmode.org/worg/org-contrib/babel/"&gt;Org-babel&lt;/a&gt;. &lt;/p&gt;
&lt;h1&gt;Down the rabbit hole&lt;/h1&gt;
&lt;p&gt;In my &lt;code&gt;blog.org&lt;/code&gt; file I can include the following python source in a python Org-babel source block block: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;orgstats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/kotfic/org2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can execute the block by using the &lt;code&gt;C-c C-c&lt;/code&gt; key binding on the &lt;code&gt;NAME&lt;/code&gt; or the &lt;code&gt;BEGIN_SRC&lt;/code&gt; lines. this produces the following figure:&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="img/analysis-of-org-mode-headings/org-level-hist.png" /&gt;&lt;/p&gt;
&lt;p&gt;There are three separate components here:&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;first&lt;/strong&gt; imports matplotlib, sets matplotlib's &lt;a href="http://matplotlib.org/faq/usage_faq.html#what-is-a-backend"&gt;backend&lt;/a&gt; to 'Agg' and then imports the &lt;code&gt;pyplot&lt;/code&gt; library as &lt;code&gt;plt&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;second&lt;/strong&gt; runs the actual bit of analysis:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;orgstats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/kotfic/org2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, the &lt;strong&gt;third&lt;/strong&gt; saves the file out to disk using the &lt;a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.savefig"&gt;savefig()&lt;/a&gt; function and returns the name of the file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;plt.savefig(&amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;)
return &amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This last statement may seem a little strange.  it is an artifact of the &lt;a href="http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html"&gt;ob-python&lt;/a&gt; export engine.  Behind the scenes org will wrap the whole code block in a function and the function will return this value. if your org-mode block has &lt;code&gt;:results file&lt;/code&gt; set in its header argument then the result block will insert a link which can be in-lined in your emacs buffer and correctly exported as a markdown image link. &lt;/p&gt;
&lt;p&gt;All together this extended example looks like this in my blog.org file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#+NAME: org-level-hist-extended&lt;/span&gt;
&lt;span class="c"&gt;#+BEGIN_SRC python :exports both :results file&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;orgstats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/kotfic/org2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and produces the following results block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#+RESULTS: org-level-hist-extended
[[file:img/analysis-of-org-mode-headings/org-level-hist.png]]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;The problem&lt;/strong&gt; is this preamble matplotlib code and this postamble org-mode code are quite distracting. An ideal &lt;strong&gt;solution&lt;/strong&gt; would involve an executable python block that still produces the correct result block and &lt;em&gt;only&lt;/em&gt; exports the relevant part of the code. &lt;/p&gt;
&lt;p&gt;A good place to start is with org-mode's &lt;a href="http://orgmode.org/manual/Noweb-reference-syntax.html"&gt;noweb&lt;/a&gt; syntax. Noweb lets you reuse code contained in other org-mode source code blocks through basic syntactic expansion. We can place our preamble code in a block like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#+NAME: plt-preamble&lt;/span&gt;
&lt;span class="c"&gt;#+BEGIN_SRC python :results file :exports none &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
&lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="c"&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and our postamble code: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#+NAME: plt-postamble
#+BEGIN_SRC python :results file :exports none

plt.savefig(&amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;)
return &amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;

#+END_SRC
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then use the &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; syntax to reference these code blocks in a block that does the actual analysis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#+NAME: org-level-hist&lt;/span&gt;
&lt;span class="c"&gt;#+BEGIN_SRC python :exports both :noweb strip-export :results file&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;preamble&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;orgstats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/kotfic/org2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;postamble&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to get the desired effect we set the noweb header argument value to &lt;code&gt;:noweb strip-export&lt;/code&gt;. This will export the code block and strip out the noweb references before exporting the relevant code the markdown.  Great start!&lt;/p&gt;
&lt;p&gt;The only nagging issue is specifying the file name of the image.  plt-postamble as-is will always save to &lt;code&gt;img/analysis-of-org-mode-headings/org-level-hist.png&lt;/code&gt;. To solve this problem we can modify plt-postamble to take a variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#+NAME: plt-postamble
#+BEGIN_SRC python :results file :exports none

# &amp;quot;path&amp;quot; variable must be set by block that
# expands this org source code block
plt.savefig(path)
return path

#+END_SRC
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The final block that produces the analysis then includes that variable (path) as a &lt;code&gt;HEADER&lt;/code&gt; argument. It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#+NAME: org-level-hist&lt;/span&gt;
&lt;span class="c"&gt;#+HEADER: :var path=&amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#+BEGIN_SRC python :exports both :noweb strip-export :results file&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;preamble&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;orgstats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/kotfic/org2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;postamble&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Into the guts a little&lt;/h1&gt;
&lt;p&gt;This works because behind the scenes python is tangling all of these blocks out to a temporary file and then executing the file.  The &lt;code&gt;:var path=img/analysis-of-org-mode-headings/org-level-hist.png&lt;/code&gt; header argument means org-mode will create a python variable named 'path' at the top of that file.  The &lt;code&gt;plt-postamble&lt;/code&gt; block picks up that variable and uses it to save the image and return the correct file name for Org's inline image display and markdown export.&lt;/p&gt;
&lt;p&gt;The above code block produces the following file into something like &lt;code&gt;/tmp/babel-29898Xn/ob-input-2989q6W&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt;
        &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Agg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;orgstats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;

        &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/kotfic/org2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/tmp/babel-29898Xn/python-2989dwQ&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now this can get a little confusing&amp;#x2026;  There is an input file that starts with &lt;code&gt;ob-input-[...]&lt;/code&gt;  and an output file &lt;code&gt;python-[...]&lt;/code&gt;.  Emacs generates the input file by creating a function &lt;code&gt;main()&lt;/code&gt;  and then appending any &lt;code&gt;:var foo=bar&lt;/code&gt; statements,  expanding any noweb blocks and inserting the python code into the main function then finally appending the &lt;code&gt;open(...).write( str(main()) )&lt;/code&gt; python line. Once the file is saved to the &lt;code&gt;tmp&lt;/code&gt; folder it executes the python script in a separate process. The script produces the output file (e.g., &lt;code&gt;python-2989dwQ&lt;/code&gt;) and emacs reads in the contents of that file to get the results of the execution and inserts them into the org-mode buffer. &lt;/p&gt;
&lt;p&gt;Normally this &lt;code&gt;ob-input-2989q6W&lt;/code&gt; file is deleted,  you can bind &lt;code&gt;org-babel--debug-input&lt;/code&gt; to true (e.g., &lt;code&gt;(setq org-babel--debug-input t)&lt;/code&gt;) to keep it around if you want to directly debug the complete python script. I have found that to be a &lt;a href="http://www.life-savers.com/"&gt;life saver&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;whew&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;So with that little trip into the guts of &lt;a href="http://orgmode.org/cgit.cgi/org-mode.git/plain/lisp/ob-eval.el"&gt;ob-eval.el&lt;/a&gt; this block: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#+NAME: org-level-hist-example&lt;/span&gt;
&lt;span class="c"&gt;#+HEADER: :var path=&amp;quot;img/analysis-of-org-mode-headings/org-level-hist.png&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#+BEGIN_SRC python :exports both :noweb strip-export :results file&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;preamble&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;orgstats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/kotfic/org2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;postamble&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;#+END_SRC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;exports as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;orgstats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/home/kotfic/org2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="img" src="img/analysis-of-org-mode-headings/org-level-hist.png" /&gt;&lt;/p&gt;
&lt;p&gt;Which is exactly what we were looking for.&lt;/p&gt;
&lt;h1&gt;Wrap up&lt;/h1&gt;
&lt;p&gt;An obvious question is "Why not &lt;a href="http://ipython.org/notebook.html"&gt;IPython Notebook&lt;/a&gt;?" With mixed markdown and python code and exporting to html/markdown, IPython has excellent support for exactly this kind of work flow- plus I already use it almost every day. So why not write this blog in IPython like a real &lt;a href="http://jakevdp.github.io/"&gt;champ&lt;/a&gt;? &lt;/p&gt;
&lt;p&gt;Ultimately (for me) org-mode provides more functionality and a better text editing experience; though clearly at the cost of increased complexity. Its pretty astonishing that these kinds of &lt;a href="http://www.literateprogramming.com/knuthweb.pdf"&gt;Literate Programming&lt;/a&gt; capabilities are available at all. With emacs I can write in text but also in python, R, and sql, I can make charts and graphs with ditaa and graphviz, I have built-in table support with excel-like features, and it all exports to HTML, ODT, PDF, LaTeX, Markdown and a half-dozen others. &lt;/p&gt;
&lt;p&gt;Really&amp;#x2026; not to shabby for a text editor that was created in 1976.&lt;/p&gt;</summary><category term="python"></category><category term="org-mode"></category><category term="matplotlib"></category><category term="pelican"></category></entry><entry><title>Getting parameters on Org-Mode headings with Python</title><link href="http://kotfic.github.io/getting-stats-on-org-mode-headings-with-python.html" rel="alternate"></link><updated>2015-04-10T00:00:00+02:00</updated><author><name>Christopher Kotfila</name></author><id>tag:kotfic.github.io,2015-04-10:getting-stats-on-org-mode-headings-with-python.html</id><summary type="html">&lt;p&gt;Python isn't really the right tool for parsing org-mode files.  Ideally I should be using elisp, along with all the functions and regular expressions that work behind the scenes to orchestrate org-modes functionality. Unfortunately my fledgling understanding of the Org-Mode's &lt;a href="http://orgmode.org/manual/Using-the-mapping-API.html"&gt;mapping api&lt;/a&gt; seems likely to fail me and rather than end up &lt;a href="http://programmers.stackexchange.com/questions/34775/correct-definition-of-the-term-yak-shaving"&gt;yak shaving&lt;/a&gt; I'm going to use python. I guess the 'right tool for the job' is often the tool you know best; which is probably why that phrase is usually heard right before someone makes a discursive ideological argument about their new favorite tool-chain.  &lt;/p&gt;
&lt;p&gt;Of course there is prior art for parsing Org-Mode files in python. I could probably use &lt;a href="https://github.com/bjonnh/PyOrgMode"&gt;PyOrgMode&lt;/a&gt; to do this but when I cloned the repo and tried to parse a some of my files it choked. "It's probably a quick fix to figure out why it didn't work&amp;#x2026;" is the thing I usually say right before a 5 hour marathon into someone else's code base.  I made a note to look into it and wrote this (quick and ugly) function instead: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_headings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headings&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Clean up,  some headings have &amp;quot;:&amp;quot; and * and other junk in them.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;heading&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;headings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# If we got an empty heading for some reason get rid of it&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;heading&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;hqueue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="c"&gt;# egrep will return a filename and the line seperated by a :&lt;/span&gt;
            &lt;span class="c"&gt;# luckily this lines up with org&amp;#39;s tag system&lt;/span&gt;
            &lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hqueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
            &lt;span class="c"&gt;# If there are tags last character will be a &amp;#39;:&amp;#39;&lt;/span&gt;
            &lt;span class="c"&gt;# this check keeps us from parsing headlines with urls at&lt;/span&gt;
            &lt;span class="c"&gt;# the end of them&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hqueue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hqueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="c"&gt;# append to tags unless we&amp;#39;ve got an empty string&lt;/span&gt;
                    &lt;span class="c"&gt;# or a queue item with spaces in it (org-mode tags&lt;/span&gt;
                    &lt;span class="c"&gt;# can&amp;#39;t have spaces)&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;hqueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;

            &lt;span class="c"&gt;# Re-join our head&lt;/span&gt;
            &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hqueue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c"&gt;# Get number of stars&lt;/span&gt;
            &lt;span class="n"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes it easy to parse headings by using subprocess's &lt;a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output"&gt;check_output()&lt;/a&gt; function and &lt;code&gt;egrep&lt;/code&gt; to pull lines that start with one or more '*' followed by a space:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="n"&gt;headings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;egrep &amp;quot;^[*]+ &amp;quot; *.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Headings can then be parsed using pandas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parse_headings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headings&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                  &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;FileName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Level&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Heading&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;ti&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_dummies&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gives me a data frame with four columns,  FileName,  Level, Heading and Tags.  I use the core strings method &lt;a href="http://pandas.pydata.org/pandas-docs/dev/generated/pandas.core.strings.StringMethods.get_dummies.html"&gt;get_dummies()&lt;/a&gt; to create a data frame of tag indicator variables so we can look at tag specific subgroups and do basic tag analysis. &lt;/p&gt;</summary><category term="python"></category><category term="org-mode"></category><category term="pandas"></category></entry><entry><title>Hierarchies, Tagging and Personal Information Management</title><link href="http://kotfic.github.io/hierarchies-tagging-and-personal-information-management.html" rel="alternate"></link><updated>2015-04-09T00:00:00+02:00</updated><author><name>Christopher Kotfila</name></author><id>tag:kotfic.github.io,2015-04-09:hierarchies-tagging-and-personal-information-management.html</id><summary type="html">&lt;p&gt;Org-mode has a dizzying array of features for organizing an infinite number of work flows.  For a long time I resisted learning org-mode because it seemed too complex. Anecdotally the problem most people seem to have when starting with org-mode is org supports so many different ways of organizing information without any expectations or guidance on how to apply org's tools to your own personal information landscape. Org-mode is built around hierarchical outlines and so it supports organizing information in tree structures quite well. Tree structures can be quite limiting- especially when there are leaf nodes that you 'feel' should belong in multiple branches of a tree.  &lt;/p&gt;
&lt;p&gt;I have been trying to think about this feeling, and I think what it boils down to is providing &lt;em&gt;access&lt;/em&gt; to the information we record.  We write things down because at some point the number of things we need to manage overwhelms our cognitive system. We lack the ability to keep track of everything in our mind.  By writing them down the cognitive task shifts towards keeping track of where we have put the information rather than keeping track of the information itself. We maintain complex mental models of pointers to the information we need. What happens when our pointer based models (reading lists, TODO lists, calendars, etc)  overwhelm our cognitive system?&lt;/p&gt;
&lt;p&gt;This is the question that catalogers have been trying to answer since &lt;a href="http://en.wikipedia.org/wiki/Library_of_Alexandria"&gt;Alexandria&lt;/a&gt;. Catalogers are primarily concerned about formal models of &lt;a href="http://www.abc-clio.com/ODLIS/odlis_a.aspx#accesspoint"&gt;access&lt;/a&gt; to information. To this end in 1998 the International Federation of Library Associations and Institutions (IFLA) came out with recommendations called the &lt;a href="http://www.ifla.org/publications/functional-requirements-for-bibliographic-records"&gt;Functional Requirements for Bibliographic Records&lt;/a&gt; (FRBR).  FRBR is essentially an &lt;a href="http://en.wikipedia.org/wiki/Entity%25E2%2580%2593relationship_model"&gt;entity-relationship&lt;/a&gt; model for managing works,  expressions, manifestations and items (e.g., books, periodicals, dvd's etc),  it is intended to replace a 'flat' record-based information model that is currently in use. FRBR is a huge specification and obviously makes no sense in the context of my personal notes and research. However the idea of functional requirements for my own information management is appealing.  In the next couple of blog posts I'm interested in trying to develop my own informal functional requirements for (my) personal information management (FRPIM?). I'll start with an outline:&lt;/p&gt;
&lt;h1&gt;Facts about Org-Mode&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Org-mode supports hierarchies&lt;ul&gt;
&lt;li&gt;Hierarchies can be &lt;a href="http://en.wikipedia.org/wiki/Holonymy"&gt;holonym&lt;/a&gt;/&lt;a href="http://en.wikipedia.org/wiki/Meronymy"&gt;meronym&lt;/a&gt; (has-a) relationships&lt;/li&gt;
&lt;li&gt;Hierarchies can be &lt;a href="http://en.wikipedia.org/wiki/Hyponymy_and_hypernymy"&gt;hypernyms/hyponymns&lt;/a&gt; (is-a) relationships&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Org-mode supports tagging&lt;ul&gt;
&lt;li&gt;Tagging are more flexible, tags can represent anything&lt;/li&gt;
&lt;li&gt;Tagging needs tighter controls to ensure it provides effective access&lt;ul&gt;
&lt;li&gt;tag authority (e.g., &lt;a href="http://www.loc.gov/marc/uma/pt1-7.html#pt4"&gt;authority records&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;thematic tag groups (projects, subjects, action types (e.g., read, write, email) ?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Org-mode supports networks (sort of)&lt;ul&gt;
&lt;li&gt;linking between headlines&lt;/li&gt;
&lt;li&gt;What is the difference between a network and a bunch of linked files?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What do I do now?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;empirical evidence?&lt;/li&gt;
&lt;li&gt;Why is this working&lt;/li&gt;
&lt;li&gt;Why is it not working?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What should I do?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;What aspects of my personal information should the org-mode hierarchy model?&lt;/li&gt;
&lt;li&gt;What tag themes should exist?&lt;/li&gt;
&lt;li&gt;How can I control the tag fixed vocabulary?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;How to transition?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;I have ~50,000 lines of notes, how do I transition these into the new system?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What about process based PIM?&lt;/h1&gt;
&lt;p&gt;It seems like really good information systems should be predictive. They should provide the information that you need '&lt;a href="http://en.wikipedia.org/wiki/Just-in-time_compilation"&gt;Just-in-time&lt;/a&gt;.' The most obvious reason this might not be a good idea is &lt;a href="http://en.wikipedia.org/wiki/Office_Assistant"&gt;Clippy&lt;/a&gt;. Is predictive information management just a bad idea? Or is it an issue of control over how predictive information management interfaces with a work flow? If you implemented a system like this how would you empirically know it was working?&lt;/p&gt;</summary><category term="org-mode"></category><category term="emacs"></category></entry><entry><title>Goals for Managing Pelican from Org-Mode</title><link href="http://kotfic.github.io/managing-pelican-from-org-mode.html" rel="alternate"></link><updated>2015-04-04T00:00:00+02:00</updated><author><name>Christopher Kotfila</name></author><id>tag:kotfic.github.io,2015-04-04:managing-pelican-from-org-mode.html</id><summary type="html">&lt;h1&gt;It Begins&lt;/h1&gt;
&lt;p&gt;I've recently decided that I would like to start blogging. This is for a couple of reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Giving Back&lt;/strong&gt; I have benefited immensely from blogs and websites where individuals who have suffered through difficult technical travails have shared the minutia of their suffering and saved me countless hours similar suffering.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self reflection&lt;/strong&gt; I have noticed a lack of self reflection in my day to day work. I hope a more disciplined approach to writing will help me to be more thoughtful about the work choices I make. I often feel overwhelmed by the processes I implement to manage the various papers,  classes, projects, research and software I work on.  I am hoping that by writing out clear goals for these various elements I will be able to better assess my progress and pivot when things aren't working.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Because I should&lt;/strong&gt; &lt;a href="http://sachachua.com/blog/"&gt;Sacha Chua&lt;/a&gt; is the last in a long line of individuals that I respect who have recommended writing daily to improve my communication skills. As a burgeoning researcher I am (begrudgingly) starting to accept that I will need more skills than just software development to be successful.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;It gets technical&lt;/h1&gt;
&lt;p&gt;I manage most of my life in &lt;a href="http://orgmode.org/"&gt;Org Mode&lt;/a&gt; which is a mode of the text editor &lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt;. Org Mode (with contributions) is a whopping 136,000+ lines of &lt;a href="http://en.wikipedia.org/wiki/Emacs_Lisp"&gt;Emacs Lisp&lt;/a&gt;. It is really an application all in its own,  I use it to organize my classes, my research, my software and personal life. I'm pleased to say I am also using it to write this blog. Along with &lt;a href="https://danlamanna.com/"&gt;a friend&lt;/a&gt; I am working on developing a small Org Mode export library for the &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; static website generator. The code is available &lt;a href="https://github.com/kotfic/ox-pelican"&gt;here&lt;/a&gt;. At the time of writing this blog there is just a small minimum viable product.&lt;/p&gt;
&lt;h1&gt;Why roll my own?&lt;/h1&gt;
&lt;p&gt;There are a bunch of great libraries out there already not the least of which is the &lt;a href="http://orgmode.org/manual/Publishing.html"&gt;Org Publish&lt;/a&gt; workflow for exporting from your org files to your hierarchical text format of choice. Unfortunately none of these met my goals:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Manage all posts and pages from a single Org Mode file. &lt;ul&gt;
&lt;li&gt;This might end up being a bottle neck if I end up with thousands of posts (burn that bridge when we get there)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Separate concerns&lt;ul&gt;
&lt;li&gt;Org Mode is for managing content,  Pelican is for publishing to the web.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Relatively light weight,&lt;ul&gt;
&lt;li&gt;Do common tasks well&lt;/li&gt;
&lt;li&gt;Edge cases should be handled by hand&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pelican should be completely unaware that Org Mode and Emacs are involved.&lt;/li&gt;
&lt;li&gt;Manage pelican post meta-data from the Org Mode property drawer.&lt;/li&gt;
&lt;li&gt;Integrate into the org export workflow as much as possible.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Possible problems&lt;/h1&gt;
&lt;p&gt;There are a few areas where this might fall flat on its face:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Org Mode can export files to pelican's content directory but it can't clean up without keeping track of what it has exported.  There are ways around this but it could get heavy very quickly.&lt;/li&gt;
&lt;li&gt;If there are lots of posts (over 1000?) in a single file we may have performance issues.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="emacs"></category><category term="org-mode"></category><category term="pelican"></category></entry></feed>